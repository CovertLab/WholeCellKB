#!/usr/bin/env python

## settings
species_wid = 'Mpn'
filenameXLSX = 'static/public/data/Mpn/reconstruction/master KB/kb-v2014_06_25.xlsx'
filenameFNA = 'static/public/data/Mpn/reconstruction/sequences/kb.fna'
filenameBackup = 'static/public/data/Mpn/kb-2014-06-25.sql'
filenameJSON = 'static/public/data/Mpn/json-cache/%s.json'
userId = 1

##setup django
import os
import sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '.'))

import settings
from django.core.management import setup_environ
setup_environ(settings)

##import classes
import datetime
from dateutil.tz import tzlocal
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.http import HttpRequest, QueryDict
from django.utils import simplejson
from odict import odict
from public import helpers
from public import models
from public import views
from subprocess import call

##rebuild KB
os.system('python manage.py reset public')
#os.system('sudo chown -R jkarr:apache xapian_index')
os.system('python manage.py rebuild_index')
os.system('mkdir xapian_index')
#os.system('sudo chown -R jkarr:apache xapian_index')

user = User.objects.get(id=userId)
helpers.batch_import_from_excel(species_wid, filenameXLSX, user)
helpers.readFasta(species_wid, filenameFNA, user)

os.system('mysqldump -u wc_kb --password=wholecellkb890 wholecellkbmpn > ' + filenameBackup)
os.system('python manage.py rebuild_index')
#os.system('sudo chown -R jkarr:apache xapian_index')

##download to JSON
species = models.Species.objects.get(wid = species_wid)

for model_name, model in helpers.getModels().iteritems():
	print 'Caching %s ...' % model_name
	
	if issubclass(model, models.SpeciesComponent):
		queryset = model.objects.filter(species__id=species.id).select_related(depth=2).all()
	else:
		queryset = model.objects.select_related(depth=2).filter(id=species.id)
	
	if model_name in ['ChromosomeFeature']:
		request = HttpRequest()
		request.GET = QueryDict('type=&type=DnaABox')
		queryset = views.list_filter(request, queryset, model, model_name)
	
	objects = []
	for obj in queryset:
		objDict = helpers.convert_modelobject_to_stdobject(obj, True)
		objDict['model'] = obj.__class__.__name__
		objects.append(objDict)

	now = datetime.datetime.now(tzlocal())
	json = odict()
	json['title'] = '%s WholeCellKB' % species.name
	json['comments'] = 'Generated by %s on %s at %s' % ('WholeCellKB', now.isoformat(), settings.ROOT_URL + reverse('public.views.exportData', kwargs={'species_wid': species.wid}))
	json['copyright'] = '%s %s' % (now.year, 'Covert Lab, Department of Bioengineering, Stanford University')
	json['data'] = objects
	
	f = open(filenameJSON % model_name, 'w')
	f.write(simplejson.dumps(json, ensure_ascii=False, encoding='utf-8').encode('UTF-8'))
	f.close()
